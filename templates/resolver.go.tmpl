package {{.Config.GqlGen.Resolver.Package}}

import (
	"{{.Package}}/db" 
	"{{.Package}}/ent"
	"{{.Package}}/{{.Config.GqlGen.Exec.Dir}}"

	"github.com/99designs/gqlgen/graphql"
	
	"sync"
)

// This file will not be regenerated automatically.
//
// It serves as dependency injection for your app, add any dependencies you require here.
type Resolver struct {
	Client *ent.Client
	{{- if .Config.Subscription}}
	{{range .Nodes}}
	{{.}}Listenners        		    map[*chan *ent.{{.}}]{{.}}Listenner
	{{.}}ListennersMutext 			  sync.Mutex
	{{plural .}}Listenners        map[*chan *ent.{{.}}Connection]{{plural .}}Listenner
	{{plural .}}ListennersMutext  sync.Mutex
	{{end}}
	{{- end}}
}

var schema *graphql.ExecutableSchema

func ExecutableSchema() graphql.ExecutableSchema {
	if schema == nil {
		schema = new(graphql.ExecutableSchema)
		*schema = {{.Config.GqlGen.Exec.Package}}.NewExecutableSchema({{.Config.GqlGen.Exec.Package}}.Config{Resolvers: &Resolver{
			Client: db.Client,
			{{- if .Config.Subscription}}
			{{range .Nodes}}
			{{.}}Listenners:        			make(map[*chan *ent.{{.}}]{{.}}Listenner),
			{{.}}ListennersMutext:  			sync.Mutex{},
			{{plural .}}Listenners:       make(map[*chan *ent.{{.}}Connection]{{plural .}}Listenner),
			{{plural .}}ListennersMutext: sync.Mutex{},
			{{end}}
			{{- end}}
		}})
	}

	return *schema
}
