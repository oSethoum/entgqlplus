extend type Query {
  {{camel .Node}}(id: ID!): {{.Node}}!
}

extend type Mutation {
  create{{.Node}}(input: Create{{.Node}}Input!): {{.Node}}!
  update{{.Node}}(id: ID!, input: Update{{.Node}}Input!): {{.Node}}!
  delete{{.Node}}(id: ID!): {{.Node}}!
}

{{- if .Config.Subscription}}
input {{plural .Node}}QueryInput {
  after: Cursor
  first: Int
  before: Cursor
  last: Int
  orderBy: {{.Node}}Order
  where: {{.Node}}WhereInput
}

extend type Subscription {
  {{plural .Node | camel}}(events: [Event!]!, query: {{plural .Node}}QueryInput): {{.Node}}Connection!
  {{camel .Node}}(events: [Event!]!, id: ID!): {{.Node}}!
}
{{- end}}