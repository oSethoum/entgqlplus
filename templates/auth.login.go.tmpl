package auth

import (
	"app/backend/db"
	"context"
	"net/http"
	"time"

	"github.com/golang-jwt/jwt"
	"github.com/labstack/echo/v4"
)

func Login(c echo.Context) error {
	ctx := context.Background()
	var input Input
	c.Bind(&input)

	// check if the user is valid
	_, err := db.Client.{{pascal .AuthNode.Name}}.Query().First(ctx)

	if err != nil {
		return c.JSON(http.StatusBadRequest, Response{Errors: "incorrect credentials"})
	}

	claims := Claims{
		StandardClaims: jwt.StandardClaims{
			ExpiresAt: time.Now().Add(time.Hour * 24 * 7).Unix(),
		},
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)

	t, err := token.SignedString([]byte("secret"))
	if err != nil {
		return c.JSON(http.StatusInternalServerError, Response{Errors: "Token cannot be signed"})
	}

	return c.JSON(http.StatusOK, Response{Data: map[string]interface{}{
		"token": t,
	}})
}